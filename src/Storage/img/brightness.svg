<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.com/svgjs" version="1.1" width="512" height="512" x="0" y="0" viewBox="0 0 512 512" style="enable-background:new 0 0 512 512" xml:space="preserve" class=""><g><script id="metastreaminitscript">(function() {
    document.getElementById('metastreaminitscript').remove()

    const INIT_TIMEOUT = 5e3
    const isFirefox = navigator.userAgent.toLowerCase().includes('firefox')

    //=========================================================================
    // document.createElement proxy
    //=========================================================================

    window.__metastreamMediaElements = new Set()

    // Proxy document.createElement to trap media elements created in-memory
    const origCreateElement = document.createElement
    const proxyCreateElement = function() {
      const element = origCreateElement.apply(document, arguments)
      if (window.__metastreamMediaElements &amp;&amp; element instanceof HTMLMediaElement) {
        window.__metastreamMediaElements.add(element)
      }
      return element
    }
    proxyCreateElement.toString = origCreateElement.toString.bind(origCreateElement)
    document.createElement = proxyCreateElement

    setTimeout(() =&gt; {
      if (window.__metastreamMediaElements) {
        window.__metastreamMediaElements.clear()
        window.__metastreamMediaElements = undefined
      }
    }, INIT_TIMEOUT)

    //=========================================================================
    // navigator.mediaSession proxy (Firefox)
    //=========================================================================

    if (isFirefox) {
      // stub out MediaSession API until Firefox supports this natively
      if (!navigator.mediaSession) {
        const noop = () =&gt; {}
        const mediaSessionStub = {
          __installedByMetastreamRemote__: true,
          setActionHandler: noop
        }
        Object.defineProperty(window.navigator, 'mediaSession', {
          value: mediaSessionStub,
          enumerable: false,
          writable: true
        })

        function MediaMetadata(metadata) {
          Object.assign(this, metadata)
        }
        window.MediaMetadata = MediaMetadata
      }

      const { mediaSession } = navigator

      // Capture action handlers for player.js proxy
      mediaSession._handlers = {}

      const _setActionHandler = mediaSession.setActionHandler
      mediaSession.setActionHandler = function(name, handler) {
        mediaSession._handlers[name] = handler
        _setActionHandler.apply(mediaSession, arguments)
      }
    }

    //=========================================================================
    // document.domain fix (Firefox)
    //=========================================================================

    if (isFirefox) {
      const domains = ['twitch.tv', 'crunchyroll.com']

      // Fix for setting document.domain in sandboxed iframe
      try {
        const { domain } = document
        if (domain &amp;&amp; domains.some(d =&gt; domain.includes(d))) {
          Object.defineProperty(document, 'domain', {
            value: domain,
            writable: true
          })
        }
      } catch (e) {}
    }

    //=========================================================================
    // Inline script embed prevention fix
    //=========================================================================

    const observeScripts = () =&gt; {
      const scriptSnippets = [
        { code: 'window.top !== window.self', replacement: 'false' },
        { code: 'self == top', replacement: 'true' },
        { code: 'top.location != window.location', replacement: 'false' }
      ]

      const getAddedScripts = mutationList =&gt;
        mutationList.reduce((scripts, mutation) =&gt; {
          if (mutation.type !== 'childList') return scripts
          const inlineScripts = Array.from(mutation.addedNodes).filter(
            node =&gt; node instanceof HTMLScriptElement &amp;&amp; node.textContent.length &gt; 0
          )
          return inlineScripts.length &gt; 0 ? [...scripts, ...inlineScripts] : scripts
        }, [])

      // Modifies inline scripts to allow embedding content in iframe
      const inlineScriptModifier = mutationsList =&gt; {
        const scripts = getAddedScripts(mutationsList)
        for (let script of scripts) {
          for (let snippet of scriptSnippets) {
            if (script.textContent.includes(snippet.code)) {
              script.textContent = script.textContent.split(snippet.code).join(snippet.replacement)
            }
          }
        }
      }

      const observer = new MutationObserver(inlineScriptModifier)
      observer.observe(document.documentElement, { childList: true, subtree: true })

      // Stop watching for changes after we finish loading
      window.addEventListener('load', () =&gt; observer.disconnect())
    }

    observeScripts()
  }());</script>
<g xmlns="http://www.w3.org/2000/svg">
	<g>
		<path d="M256,120c-74.443,0-136,61.557-136,136s61.557,136,136,136s136-61.557,136-136S330.443,120,256,120z M271,360.484V151.516    c50.75,7.357,91,51.729,91,104.484S321.75,353.127,271,360.484z" fill="#697ca6" data-original="#000000" class=""/>
	</g>
</g>
<g xmlns="http://www.w3.org/2000/svg">
	<g>
		<path d="M256,0c-8.291,0-15,6.709-15,15v60c0,8.291,6.709,15,15,15s15-6.709,15-15V15C271,6.709,264.291,0,256,0z" fill="#697ca6" data-original="#000000" class=""/>
	</g>
</g>
<g xmlns="http://www.w3.org/2000/svg">
	<g>
		<path d="M256,422c-8.291,0-15,6.709-15,15v60c0,8.291,6.709,15,15,15s15-6.709,15-15v-60C271,428.709,264.291,422,256,422z" fill="#697ca6" data-original="#000000" class=""/>
	</g>
</g>
<g xmlns="http://www.w3.org/2000/svg">
	<g>
		<path d="M75,241H15c-8.291,0-15,6.709-15,15s6.709,15,15,15h60c8.291,0,15-6.709,15-15C90,247.709,83.291,241,75,241z" fill="#697ca6" data-original="#000000" class=""/>
	</g>
</g>
<g xmlns="http://www.w3.org/2000/svg">
	<g>
		<path d="M497,241h-60c-8.291,0-15,6.709-15,15s6.709,15,15,15h60c8.291,0,15-6.709,15-15C512,247.709,505.291,241,497,241z" fill="#697ca6" data-original="#000000" class=""/>
	</g>
</g>
<g xmlns="http://www.w3.org/2000/svg">
	<g>
		<path d="M138.326,373.675c-5.859-5.859-15.352-5.859-21.211,0l-42.437,42.422c-5.86,5.859-5.86,15.351,0,21.211    c5.859,5.859,15.352,5.859,21.211,0l42.437-42.422C144.185,389.027,144.185,379.534,138.326,373.675z" fill="#697ca6" data-original="#000000" class=""/>
	</g>
</g>
<g xmlns="http://www.w3.org/2000/svg">
	<g>
		<path d="M437.308,74.692c-5.859-5.859-15.352-5.859-21.211,0l-42.422,42.422c-5.859,5.859-5.859,15.352,0,21.211    c5.859,5.859,15.352,5.859,21.211,0l42.422-42.422C443.167,90.044,443.167,80.552,437.308,74.692z" fill="#697ca6" data-original="#000000" class=""/>
	</g>
</g>
<g xmlns="http://www.w3.org/2000/svg">
	<g>
		<path d="M437.308,416.097l-42.422-42.422c-5.859-5.859-15.352-5.859-21.211,0s-5.859,15.352,0,21.211l42.422,42.422    c5.859,5.859,15.352,5.859,21.211,0S443.167,421.956,437.308,416.097z" fill="#697ca6" data-original="#000000" class=""/>
	</g>
</g>
<g xmlns="http://www.w3.org/2000/svg">
	<g>
		<path d="M138.326,117.114L95.889,74.692c-5.86-5.859-15.352-5.859-21.211,0c-5.859,5.859-5.859,15.352,0,21.211l42.437,42.422    c5.859,5.859,15.352,5.859,21.211,0C144.185,132.466,144.185,122.973,138.326,117.114z" fill="#697ca6" data-original="#000000" class=""/>
	</g>
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
</g></svg>
